
import { useState, useEffect, useCallback } from "react";
import { useToast } from "@/hooks/use-toast";
import { toast } from "sonner";
import { demandeInterventionService } from "@/services/supabaseService";

export const useInterventionRequests = () => {
  const [loading, setLoading] = useState(true);
  const [processing, setProcessing] = useState(false);
  const [requests, setRequests] = useState<any[]>([]);
  const [selectedRequest, setSelectedRequest] = useState<any | null>(null);
  const [actionType, setActionType] = useState<"accept" | "reject" | null>(null);
  
  const { toast: useToastHook } = useToast();

  const fetchRequests = useCallback(async () => {
    console.log("üîÑ Chargement des demandes d'intervention en attente...");
    setLoading(true);
    try {
      const data = await demandeInterventionService.getPending();
      console.log("‚úÖ Demandes d'intervention r√©cup√©r√©es:", data);
      setRequests(data || []);
    } catch (error) {
      console.error("‚ùå Erreur lors du chargement des demandes:", error);
      useToastHook({
        variant: "destructive",
        title: "Erreur de chargement",
        description: "Impossible de charger les demandes d'intervention.",
      });
    } finally {
      setLoading(false);
    }
  }, [useToastHook]);

  useEffect(() => {
    fetchRequests();
  }, [fetchRequests]);

  // Fonctions pour s√©lectionner une demande et d√©finir l'action (accept/reject)
  const handleAccept = (request: any) => {
    console.log("üëÜ S√©lection de la demande pour acceptation:", request);
    setSelectedRequest(request);
    setActionType("accept");
  };

  const handleReject = (request: any) => {
    console.log("üëÜ S√©lection de la demande pour rejet:", request);
    setSelectedRequest(request);
    setActionType("reject");
  };

  // Fonction pour confirmer l'action (accept/reject)
  const confirmAction = async (comment?: string) => {
    if (!selectedRequest || !actionType) {
      console.error("‚ùå Aucune demande ou action s√©lectionn√©e");
      return false;
    }
    
    // V√©rifier si un commentaire est fourni pour le rejet
    if (actionType === "reject") {
      if (!comment?.trim()) {
        console.error("‚ùå Commentaire obligatoire pour le rejet");
        useToastHook({
          variant: "destructive",
          title: "Commentaire requis",
          description: "Veuillez fournir un motif pour le refus de la demande.",
        });
        return false;
      }
    }
    
    console.log(`üîÑ D√©but de l'action: ${actionType} pour la demande ID: ${selectedRequest.id}`);
    console.log(`Commentaire de refus: ${comment || 'Non fourni'}`);
    setProcessing(true);
    
    try {
      if (actionType === "accept") {
        console.log("üîÑ Acceptation de la demande et cr√©ation d'intervention...");
        
        // Cr√©er l'intervention bas√©e sur la demande et marquer comme valid√©e au lieu de supprimer
        const newIntervention = await demandeInterventionService.createFromRequestAndAccept(selectedRequest.id);
        console.log("‚úÖ Intervention cr√©√©e avec succ√®s:", newIntervention);
        
        // V√©rification des donn√©es de l'intervention
        if (!newIntervention || !newIntervention.id) {
          console.error("‚ö†Ô∏è L'intervention a √©t√© cr√©√©e mais les donn√©es retourn√©es sont incompl√®tes");
        }
        
        // Mettre √† jour l'interface en supprimant la demande trait√©e
        setRequests(prev => prev.filter(req => req.id !== selectedRequest.id));
        
        toast.success("Demande accept√©e et intervention cr√©√©e avec succ√®s");
        setProcessing(false);
        
        console.log("‚úÖ Processus d'acceptation termin√© avec succ√®s");
        return true;
      } else if (actionType === "reject") {
        console.log("üîÑ Rejet de la demande...");
        console.log("Motif de rejet fourni:", comment);
        
        // Rejeter la demande avec le commentaire
        await demandeInterventionService.updateStatus(selectedRequest.id, "rejet√©e", comment);
        console.log("‚úÖ Demande rejet√©e avec succ√®s, statut mis √† jour et motif enregistr√©");
        
        // Mettre √† jour l'interface en supprimant la demande trait√©e
        setRequests(prev => prev.filter(req => req.id !== selectedRequest.id));
        
        toast.success("Demande refus√©e avec succ√®s");
        setProcessing(false);
        
        console.log("‚úÖ Processus de rejet termin√© avec succ√®s");
        return true;
      }
      
      return false;
    } catch (error: any) {
      console.error("‚ùå Erreur lors de la gestion de la demande:", error);
      useToastHook({
        variant: "destructive",
        title: "Erreur",
        description: error.message || "Une erreur est survenue lors de la mise √† jour.",
      });
      
      setProcessing(false);
      return false;
    }
  };

  return {
    loading,
    processing,
    requests,
    selectedRequest,
    setSelectedRequest,
    actionType,
    handleAccept,
    handleReject,
    confirmAction,
    refreshRequests: fetchRequests
  };
};
